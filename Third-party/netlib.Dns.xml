<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netlib.Dns</name>
    </assembly>
    <members>
        <member name="T:netlib.Dns.DnsRecord">
            <summary>
            Represents a complete DNS record (DNS_RECORD)
            </summary>
            <remarks>
            This structure is used to hold a complete DNS record
            as returned from the DnsQuery API.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsRecord.Next">
            <summary>
            Gets or sets the next record.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.Name">
            <summary>
            Gets or sets the name of the record.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.RecordType">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.DataLength">
            <summary>
            Gets or sets the data length.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.Ttl">
            <summary>
            Gets or sets the TTL count
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsRecord.DnsRecordFlags">
            <summary>
            Represents the flags of a <see cref="T:netlib.Dns.DnsRecord"/>.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.DnsRecordFlags.DW">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecord.DnsRecordFlags.S">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsQueryType">
            <summary>
            DNS query types
            </summary>
            <remarks>
            This enum is used by the DnsQuery API call to describe the
            options to be given to a DNS server along with a query.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.STANDARD">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.ACCEPT_TRUNCATED_RESPONSE">
            <summary>
            Accept truncated response
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.USE_TCP_ONLY">
            <summary>
            Use TCP only
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.NO_RECURSION">
            <summary>
            No recursion
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.BYPASS_CACHE">
            <summary>
            Bypass cache
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.NO_WIRE_QUERY">
            <summary>
            Cache only
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.NO_LOCAL_NAME">
            <summary>
            Directs DNS to ignore the local name.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.NO_HOSTS_FILE">
            <summary>
            Prevents the DNS query from consulting the HOSTS file.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.NO_NETBT">
            <summary>
            Prevents the DNS query from using NetBT for resolution.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.WIRE_ONLY">
            <summary>
            Directs DNS to perform a query using the network only,
            bypassing local information.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.TREAT_AS_FQDN">
            <summary>
            Treat as FQDN
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.ALLOW_EMPTY_AUTH_RESP">
            <summary>
            Allow empty auth response
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.DONT_RESET_TTL_VALUES">
            <summary>
            Don't reset TTL values
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.RESERVED">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.CACHE_ONLY">
            <summary>
            obsolete.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryType.RETURN_MESSAGE">
            <summary>
            Directs DNS to return the entire DNS response message.
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsQueryReturnCode">
            <summary>
            The possible return codes of the DNS API call. This enum can
            be used to decypher the <see cref="P:netlib.Dns.DnsException.ErrorCode"/>
            property's return value.
            </summary>
            <remarks>
            This enum is used to describe a failed return code by the
            DnsQuery API used in the <see cref="T:netlib.Dns.DnsRequest"/> class.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.SUCCESS">
            <summary>
            Successful query
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.UNSPECIFIED_ERROR">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.MASK">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.FORMAT_ERROR">
            <summary>
            DNS server unable to interpret format.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.SERVER_FAILURE">
            <summary>
            DNS server failure.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NAME_ERROR">
            <summary>
            DNS name does not exist.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NOT_IMPLEMENTED">
            <summary>
            DNS request not supported by name server.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.REFUSED">
            <summary>
            DNS operation refused.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.YXDOMAIN">
            <summary>
            DNS name that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.YXRRSET">
            <summary>
            DNS RR set that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NXRRSET">
            <summary>
            DNS RR set that ought to exist, does not exist.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NOTAUTH">
            <summary>
            DNS server not authoritative for zone.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NOTZONE">
            <summary>
            DNS name in update or prereq is not in zone.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.BADSIG">
            <summary>
            DNS signature failed to verify.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.BADKEY">
            <summary>
            DNS bad key.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.BADTIME">
            <summary>
            DNS signature validity expired.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.PACKET_FMT_BASE">
            <summary>
            Packet format
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NO_RECORDS">
            <summary>
            No records found for given DNS query.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.BAD_PACKET">
            <summary>
            Bad DNS packet.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.NO_PACKET">
            <summary>
            No DNS packet.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.RCODE">
            <summary>
            DNS error, check rcode.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsQueryReturnCode.UNSECURE_PACKET">
            <summary>
            Unsecured DNS packet.
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsFreeType">
            <summary>
            Possible arguments for the DnsRecordListFree api
            </summary>
            <remarks>
            This enum is used by the DnsRecordListFree API.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsFreeType.FreeFlat">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsFreeType.FreeRecordList">
            <summary>
            Frees the record list returned by the DnsQuery API
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsException">
            <summary>
            Represents the exception that occurs when a <see cref="T:netlib.Dns.DnsRequest"/>
            fails.
            </summary>
            <remarks>
            <para>
            The exception that occurs when a DNS request fails at any level.
            </para>
            <para>
            This class is used to represent two broad types of exceptions:
            <list type="bullet">
                <item>Win32 API Exceptions that occurred when calling the DnsQuery API</item>
                <item>Exceptions of other types that occurred when working with
                the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
                classes.</item>
            </list>
            </para>
            <para>
            Win32 errors that are DNS specific are specified in the
            <see cref="T:netlib.Dns.DnsQueryReturnCode"/> enumeration but if the
            <see cref="P:netlib.Dns.DnsException.ErrorCode"/> returned is not defined in that
            enum then the number returned will be defined in WinError.h.
            </para>
            <para>
            Exceptions of other types are available through the
            InnerException property.
            </para>
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:netlib.Dns.DnsException"/>
            </summary>
            <remarks>
            Used to raise a <see cref="T:netlib.Dns.DnsException"/> with all the default
            properties. The message property will return: Unspecified
            DNS exception.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:netlib.Dns.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <remarks>
            Used to raise a <see cref="T:netlib.Dns.DnsException"/> where the only important
            information is a description about the error. The <see cref="P:netlib.Dns.DnsException.ErrorCode"/>
            property will return 0 or SUCCESS indicating that the DNS API calls
            succeeded, regardless of whether they did or did not.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsException.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:netlib.Dns.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <param name="errcode">the error code (<see cref="T:netlib.Dns.DnsQueryReturnCode"/>)
            if the DnsQuery api failed</param>
            <remarks>
            Used to raise a <see cref="T:netlib.Dns.DnsException"/> where the underlying DNS
            API call fails. In this case, the <see cref="P:netlib.Dns.DnsException.ErrorCode"/> property
            is the most important information about the exception. In most cases,
            the number returned is a value in the <see cref="T:netlib.Dns.DnsQueryReturnCode"/>
            enum however, if it is not, the error is defined in WinError.h.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:netlib.Dns.DnsException"/>
            </summary>
            <param name="message">the human readable description of the
            problem</param>
            <param name="innerException">the exception that caused the
            underlying error</param>
            <remarks>
            Used to raise a <see cref="T:netlib.Dns.DnsException"/> where the exception is
            some other type but a typeof(DnsException) is desired to be raised
            instead. In this case, the <see cref="P:netlib.Dns.DnsException.ErrorCode"/> property
            always returns 0 or SUCCESS and is a useless property.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:netlib.Dns.DnsException"/> for <see cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
            <param name="info">the serialization information</param>
            <param name="context">the context</param>
            <remarks>
            Used by the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsException.ErrorCode">
             <summary>
             Gets the error code (<see cref="T:netlib.Dns.DnsQueryReturnCode"/>)
             if the DnsQuery api failed. Will be set to success (0) if the API
             didn't fail but another part of the code did.
             </summary>
             <remarks>
             Win32 errors that are DNS specific are specified in the
             <see cref="T:netlib.Dns.DnsQueryReturnCode"/> enumeration but if the
             <see cref="P:netlib.Dns.DnsException.ErrorCode"/> returned is not defined in that
             enum then the number returned will be defined in WinError.h.
             </remarks>
             <value>Value will be defined in WinError.h if not defined in the
             <see cref="T:netlib.Dns.DnsQueryReturnCode"/> enum.</value>
             <example>
             This example shows how to decypher the return of the
             ErrorCode property.
             <code>
             try
             {
                 ...
             }
             catch(DnsException dnsEx)
             {
                 int errcode = dnsEx.ErrorCode;
                 if (! Enum.IsDefined(typeof(DnsQueryReturnCode), errcode))
                 {
                     //defined in winerror.h
                     Console.WriteLine("WIN32 Error: {0}", errcode);
                     return;
                 }
            
                 DnsQueryReturnCode errretcode = (DnsQueryReturnCode) errcode;
                 if (errretcode == DnsQueryReturnCode.SUCCESS)
                 {
                     //inner exception contains the goodies
                     Console.WriteLine(dnsEx.InnerException.ToString());
                     return;
                 }
            
                 //dns error
                 Console.WriteLine("DNS Error: {0}", errretcode.ToString("g"));
             }
             </code>
             </example>
        </member>
        <member name="T:netlib.Dns.DnsRecordType">
            <summary>
            DNS record types
            </summary>
            <remarks>
            This enum represents all possible DNS record types that
            could be returned by the DnsQuery API.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.A">
            <summary>
            Address record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.CNAME">
            <summary>
            Canonical Name record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.SOA">
            <summary>
            Start Of Authority record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.PTR">
            <summary>
            Pointer record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.MX">
            <summary>
            Mail Exchange record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.TEXT">
            <summary>
            Text record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.SRV">
            <summary>
            Server record
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.ALL">
            <summary>
            All records
            </summary>
        </member>
        <member name="F:netlib.Dns.DnsRecordType.ANY">
            <summary>
            Any records
            </summary>
        </member>
        <member name="T:netlib.Dns.DnsWrapper">
            <summary>
            Represents a container for a DNS record of any type
            </summary>
            <remarks>
            The <see cref="F:netlib.Dns.DnsWrapper.RecordType"/> property's value
            helps determine what type real type of the
            <see cref="F:netlib.Dns.DnsWrapper.RecordData"/> property returns as
            noted in this chart:
            <list type="table">
                <listheader>
                    <term>RecordType</term>
                    <term>RecordData</term>
                </listheader>
                <item>
                    <term>A</term>
                    <description><see cref="T:netlib.Dns.Records.ARecord"/></description>
                </item>
                <item>
                    <term>CNAME</term>
                    <description><see cref="T:netlib.Dns.Records.PTRRecord"/></description>
                </item>
                <item>
                    <term>PTR</term>
                    <description><see cref="T:netlib.Dns.Records.PTRRecord"/></description>
                </item>
                <item>
                    <term>MX</term>
                    <description><see cref="T:netlib.Dns.Records.MXRecord"/></description>
                </item>
                <item>
                    <term>SOA</term>
                    <description><see cref="T:netlib.Dns.Records.SOARecord"/></description>
                </item>
                <item>
                    <term>SRV</term>
                    <description><see cref="T:netlib.Dns.Records.SRVRecord"/></description>
                </item>
                <item>
                    <term>TEXT</term>
                    <description><see cref="T:netlib.Dns.Records.TXTRecord"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsWrapper.RecordType">
            <summary>
            Gets or sets the type of DNS record contained in the
            <see cref="F:netlib.Dns.DnsWrapper.RecordData"/> property.
            </summary>
            <remarks>
            This property indicates the type of DNS record
            that the <see cref="F:netlib.Dns.DnsWrapper.RecordData"/> property is
            holding.
            </remarks>
        </member>
        <member name="F:netlib.Dns.DnsWrapper.RecordData">
            <summary>
            Gets or sets the DNS record object as denoted in the
            <see cref="F:netlib.Dns.DnsWrapper.RecordType"/> field.
            </summary>
            <remarks>
            This property holds the actual DNS record.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsWrapper.Equals(netlib.Dns.DnsRecordType)">
            <summary>
            Determines whether or not this <see cref="T:netlib.Dns.DnsWrapper"/>
            instance is equal to a specific <see cref="T:netlib.Dns.DnsRecordType"/>
            by comparing the <see cref="F:netlib.Dns.DnsWrapper.RecordType"/> property of the
            current <see cref="T:netlib.Dns.DnsWrapper"/> against the
            <see cref="T:netlib.Dns.DnsRecordType"/> argument.
            </summary>
            <param name="type">The <see cref="T:netlib.Dns.DnsRecordType"/> to compare to.</param>
            <returns>A boolean indicating whether or not this <see cref="T:netlib.Dns.DnsWrapper"/>
            object contains a DNS record matching the entered type.</returns>
            <remarks>
            Determines if this <see cref="T:netlib.Dns.DnsWrapper"/> is of a specific
            <see cref="T:netlib.Dns.DnsRecordType"/>. The comparison does not test the
            <see cref="F:netlib.Dns.DnsWrapper.RecordData"/> field.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsWrapper.Equals(System.Object)">
            <summary>
            Determines whether or not this <see cref="T:netlib.Dns.DnsWrapper"/> instance
            is equal to another <see cref="T:netlib.Dns.DnsWrapper"/> or to a
            <see cref="T:netlib.Dns.DnsRecordType"/> instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>A boolean indicating whether or not this <see cref="T:netlib.Dns.DnsWrapper"/>
            object equals the entered object.</returns>
            <remarks>
            Determines if this <see cref="T:netlib.Dns.DnsWrapper"/> instance is equal to
            an object. If the object is a <see cref="T:netlib.Dns.DnsRecordType"/>, the
            <see cref="M:netlib.Dns.DnsWrapper.Equals(netlib.Dns.DnsRecordType)"/> method is used to determine
            equality based on the record type. If the object is a <see cref="T:netlib.Dns.DnsWrapper"/>
            object, the <see cref="M:netlib.Dns.DnsWrapper.CompareTo(System.Object)"/> method is used to determine
            equality. If the object is any other type, the <see cref="T:System.Object"/>
            class's Equal method is used for comparison.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a
            hash table.
            </summary>
            <returns>Integer value representing the hashcode of this
            instance of <see cref="T:netlib.Dns.DnsWrapper"/>.</returns>
            <remarks>
            The GetHashCode method uses the hash codes of the <see cref="F:netlib.Dns.DnsWrapper.RecordData"/>
            and <see cref="F:netlib.Dns.DnsWrapper.RecordType"/> properties to generate a unique code
            for this particular record type/data combination.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsWrapper.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the
            comparands. The return value has these meanings:
            <list type="table">
                <listheader>
                    <term>Value</term>
                    <term>Meaning</term>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>This instance is less than obj. The <see cref="F:netlib.Dns.DnsWrapper.RecordData"/>
                    types do not match.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>This instance is equal to obj. </description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>This instance is greater than obj. The <see cref="F:netlib.Dns.DnsWrapper.RecordType"/>
                    do not match.</description>
                </item>
            </list>
            </returns>
            <remarks>
            Compares a <see cref="T:netlib.Dns.DnsWrapper"/> to this instance by its
            <see cref="F:netlib.Dns.DnsWrapper.RecordType"/> and <see cref="F:netlib.Dns.DnsWrapper.RecordData"/> properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            obj is not the same type as this instance.
            </exception>
        </member>
        <member name="T:netlib.Dns.DnsWrapperCollection">
            <summary>
            Represents a collection of <see cref="T:netlib.Dns.DnsWrapper"/> objects.
            </summary>
            <remarks>
            The DnsWrapperCollection is a collection of <see cref="T:netlib.Dns.DnsWrapper"/>
            objects. The resultant collection represents all of the DNS records
            for the given domain that was looked up. This class cannot be directly
            created - it is created by the <see cref="T:netlib.Dns.DnsRequest"/> and
            <see cref="T:netlib.Dns.DnsResponse"/> classes to hold the returned DNS
            records for the given domain.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsWrapperCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:netlib.Dns.DnsWrapper"/> at the specified
            ordinal in the collection
            </summary>
            <remarks>
            Gets the <see cref="T:netlib.Dns.DnsWrapper"/> at the specified
            index of the collection.
            </remarks>
            <param name="i">The index to retrieve from the collection.</param>
            <value>The <see cref="T:netlib.Dns.DnsWrapper"/> at the specified index of
            the collection.</value>
        </member>
        <member name="T:netlib.Dns.DnsRequest">
             <summary>
             Represents one DNS request. Allows for a complete DNS record lookup
             on a given _Domain using the Windows API.
             </summary>
             <remarks>
             <para>
             The DnsRequest class represents a complete DNS request for a given
             _Domain on a specified DNS server, including all options. The
             DnsRequest class uses the Windows API to do the query and the dlls
             used are only found on Windows 2000 or higher machines. The class
             will throw a <see cref="T:System.NotSupportedException"/> exception if run
             on an machine not capable of using the APIs that are required.
             </para>
             <para>
             Version Information
             </para>
             <para>
                     3/8/2003 v1.1 (C#) - Released on 5/31/2003
             </para>
             <para>
             Created by: Bill Gearhart. Based on code by Patrik Lundin.
             See version 1.0 remarks below. Specific attention was given
             to the exposed interface which got a 110% overhaul.
             </para>
             <para>
             Notable changes from the previous version:
             <list type="bullet">
                 <item>
                     <description>
                         structs filled with constants were changed to enums
                     </description>
                 </item>
                 <item>
                     <description>
                         .net datatypes were changed to c# datatypes
                     </description>
                 </item>
                 <item>
                     <description>
                         every object is now in it's own *.cs file
                     </description>
                 </item>
                 <item>
                     <description>
                         custom collections and exceptions added
                     </description>
                 </item>
                 <item>
                     <description>
                         better object orientation - request and response classes
                         created for the dns query request/response session so that
                         it follows the .NET model
                     </description>
                 </item>
                 <item>
                     <description>
                         eliminated duplicate recs returned by an ALL query
                     </description>
                 </item>
                 <item>
                     <description>
                         bad api return code enumeration added
                     </description>
                 </item>
                 <item>
                     <description>
                         ToString() overridden to provide meaningful info for many
                         of the dns data structs
                     </description>
                 </item>
                 <item>
                     <description>
                         documentation and notes were created for all classes
                     </description>
                 </item>
                 <item>
                     <description>
                         added check to ensure code only runs on w2k or better
                     </description>
                 </item>
                 <item>
                     <description>
                         obsolete DNS record types are now marked as such
                     </description>
                 </item>
                 <item>
                     <description>
                         newer enum values added to DnsQueryType enum
                     </description>
                 </item>
                 <item>
                     <description>
                         compiled html documentation was written which always takes
                         20 times longer than writing the code does.
                     </description>
                 </item>
                 <item>
                     <description>
                         this list of changes was compiled by your's truly...
                     </description>
                 </item>
                 <item>
                     <description>
                         smoothed out object and member names so they were more
                         intuitive - for instance: DNS_MX_DATA became MXRecord
                     </description>
                 </item>
                 <item>
                     <description>
                         added call to DnsRecordListFree API to free resources after
                         DnsQuery call
                     </description>
                 </item>
                 <item>
                     <description>
                         altered DnsQuery API call to allow for servers other than the
                         local DNS server from being queried
                     </description>
                 </item>
             </list>
             </para>
             <para>
                 4/15/2002 v1.0 (C#)
             </para>
             <para>
             Created by: Patrik Lundin
             </para>
             <para>
             Based on code found at:
             <a href="http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp">http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp</a>
            
             <list type="bullet">
                 <item>
                     <description>
                         Initial implementation.
                     </description>
                 </item>
             </list>
             </para>
             </remarks>
             <example>
             Use the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/> objects
             together to get DNS information for aspemporium.com from the nameserver
             where the site is hosted.
             <code>
             using System;
             using netlib.Dns;
             using netlib.Dns.Records;
            
             namespace ClassLibrary1
             {
                 class __loader
                 {
                     static void Main()
                     {
                         try
                         {
                             DnsRequest request = new DnsRequest();
                             request.TreatAsFQDN=true;
                             request.BypassCache=true;
                             request.Servers.Add("dns.compresolve.com");
                             request._domain = "aspemporium.com";
                             DnsResponse response = request.GetResponse();
            
                             Console.WriteLine("Addresses");
                             Console.WriteLine("--------------------------");
                             foreach(ARecord addr in response.ARecords)
                                 Console.WriteLine("\t{0}", addr.ToString());
                             Console.WriteLine();
            
                             Console.WriteLine("Name Servers");
                             Console.WriteLine("--------------------------");
                             foreach(PTRRecord ns in response.NSRecords)
                                 Console.WriteLine("\t{0}", ns.ToString());
                             Console.WriteLine();
            
                             Console.WriteLine("Mail Exchanges");
                             Console.WriteLine("--------------------------");
                             foreach(MXRecord exchange in response.MXRecords)
                                 Console.WriteLine("\t{0}", exchange.ToString());
                             Console.WriteLine();
            
                             Console.WriteLine("Canonical Names");
                             Console.WriteLine("--------------------------");
                             foreach(PTRRecord cname in response.GetRecords(DnsRecordType.CNAME))
                                 Console.WriteLine("\t{0}", cname.ToString());
                             Console.WriteLine();
            
                             Console.WriteLine("Start of Authority Records");
                             Console.WriteLine("--------------------------");
                             foreach(SOARecord soa in response.GetRecords(DnsRecordType.SOA))
                                 Console.WriteLine("\t{0}", soa.ToString());
                             Console.WriteLine();
            
                             //foreach(DnsWrapper wrap in response.RawRecords)
                             //{
                             //  Console.WriteLine(wrap.RecordType);
                             //}
            
                             response = null;
                             request = null;
                         }
                         catch(DnsException ex)
                         {
                             Console.WriteLine("EXCEPTION DOING DNS QUERY:");
                             Console.WriteLine("\t{0}", ((DnsQueryReturnCode) ex.ErrorCode).ToString("g"));
            
                             if (ex.InnerException != null)
                                 Console.WriteLine(ex.InnerException.ToString());
                         }
                     }
                 }
             }
            
             </code>
             </example>
            
        </member>
        <member name="M:netlib.Dns.DnsRequest.DnsQuery(System.String,netlib.Dns.DnsRecordType,netlib.Dns.DnsQueryType,System.IntPtr,System.IntPtr@,System.IntPtr)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsquery.asp
            </summary>
        </member>
        <member name="M:netlib.Dns.DnsRequest.DnsRecordListFree(System.IntPtr,netlib.Dns.DnsFreeType)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsrecordlistfree.asp
            </summary>
        </member>
        <member name="M:netlib.Dns.DnsRequest.#ctor">
            <summary>
            Creates a new instance of <see cref="T:netlib.Dns.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:netlib.Dns.DnsRequest._domain"/> property is set to null
            and all other properties have their default value
            of false, except for <see cref="P:netlib.Dns.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsRequest.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:netlib.Dns.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:netlib.Dns.DnsRequest._domain"/> property is set to the domain
            argument and all other properties have their default value
            of false, except for <see cref="P:netlib.Dns.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
            <param name="domain">The hostname that DNS information is desired for.
            This should not be an ip address. For example: yahoo.com</param>
        </member>
        <member name="M:netlib.Dns.DnsRequest.GetResponse(netlib.Dns.DnsRecordType)">
            <summary>
            Queries the local DNS server for information about
            this instance of <see cref="T:netlib.Dns.DnsRequest"/> and returns
            the response as a <see cref="T:netlib.Dns.DnsResponse"/>
            </summary>
            <returns>A <see cref="T:netlib.Dns.DnsResponse"/> object containing the response
            from the DNS server.</returns>
            <exception cref="T:System.NotSupportedException">
            The code is running on a machine lesser than Windows 2000
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:netlib.Dns.DnsRequest._domain"/> property is null
            </exception>
            <exception cref="T:netlib.Dns.DnsException">
            The DNS query itself failed or parsing of the returned
            response failed
            </exception>
            <remarks>
            Returns a <see cref="T:netlib.Dns.DnsResponse"/> representing the response
            from the DNS server or one of the exceptions noted in the
            exceptions area, the most common of which is the
            <see cref="T:netlib.Dns.DnsException"/>.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.UseTCPOnly">
            <summary>
            Gets or sets whether or not to use TCP only for the query.
            </summary>
            <value>Boolean indicating whether or not to use TCP instead of UDP for the query</value>
            <remarks>
            If set to true, the DNS query will be done via TCP rather than UDP. This
            is useful if the DNS service you are trying to reach is running on
            TCP but not on UDP.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.AcceptTruncatedResponse">
            <summary>
            Gets or sets whether or not to accept truncated results —
            does not retry under TCP.
            </summary>
            <value>Boolean indicating whether or not to accept truncated results.</value>
            <remarks>
            Determines wherher or not the server will be re-queried in the event
            that a response was truncated.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.NoRecursion">
            <summary>
            Gets or sets whether or not to perform an iterative query
            </summary>
            <value>Boolean indicating whether or not to use recursion
            to resolve the query.</value>
            <remarks>
            Specifically directs the DNS server not to perform
            recursive resolution to resolve the query.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.BypassCache">
            <summary>
            Gets or sets whether or not to bypass the resolver cache
            on the lookup.
            </summary>
            <remarks>
            Setting this to true allows you to specify one or more DNS servers
            to query instead of querying the local DNS cache and server.
            If false is set, the list of servers is ignored and the local DNS
            cache and server is used to resolve the query.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.QueryCacheOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a
            query on the local cache only
            </summary>
            <value>Boolean indicating whether or not to only use the
            DNS cache to resolve a query.</value>
            <remarks>
            This option allows you to query the local DNS cache only instead
            of making a DNS request over either UDP or TCP.
            This property represents the logical opposite of the
            <see cref="P:netlib.Dns.DnsRequest.WireOnly"/> property.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.WireOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a
            query using the network only, bypassing local information.
            </summary>
            <value>Boolean indicating whether or not to use the
            network only instead of local information.</value>
            <remarks>
            This property represents the logical opposite of the
            <see cref="P:netlib.Dns.DnsRequest.QueryCacheOnly"/> property.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.NoLocalName">
            <summary>
            Gets or sets whether or not to direct DNS to ignore the
            local name.
            </summary>
            <value>Boolean indicating whether or not to ignore the local name.</value>
            <remarks>
            Determines how the DNS query handles local names.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.NoHostsFile">
            <summary>
            Gets or sets whether or not to prevent the DNS query from
            consulting the HOSTS file.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            the HOSTS file when querying.</value>
            <remarks>
            Determines how the DNS query handles accessing the HOSTS file when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.NoNetbt">
            <summary>
            Gets or sets whether or not to prevent the DNS query from
            using NetBT for resolution.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            NetBT during the query.</value>
            <remarks>
            Determines how the DNS query handles accessing NetBT when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.QueryReturnMessage">
            <summary>
            Gets or sets whether or not to direct DNS to return
            the entire DNS response message.
            </summary>
            <value>Boolean indicating whether or not to return the entire
            response.</value>
            <remarks>
            Determines how the DNS query expects the response to be
            received from the server.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.TreatAsFQDN">
            <summary>
            Gets or sets whether or not to prevent the DNS
            response from attaching suffixes to the submitted
            name in a name resolution process.
            </summary>
            <value>Boolean indicating whether or not to allow
            suffix attachment during resolution.</value>
            <remarks>
            Determines how the DNS server handles suffix appending
            to the submitted name during name resolution.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest.DontResetTTLValues">
            <summary>
            Gets or sets whether or not to store records
            with the TTL corresponding to the minimum value
            TTL from among all records
            </summary>
            <value>Boolean indicating whether or not to
            use TTL values from all records.</value>
            <remarks>
            Determines how the DNS query handles TTL values.
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsRequest._domain">
            <summary>
            Gets or sets the _Domain to query. The _Domain must be a hostname,
            not an IP address.
            </summary>
            <remarks>
            This method is expecting a hostname, not an IP address. The
            system will fail with a <see cref="T:netlib.Dns.DnsException"/> when
            <see cref="M:netlib.Dns.DnsRequest.GetResponse(netlib.Dns.DnsRecordType)"/> is called if _domain is an IP address.
            </remarks>
            <value>String representing the _Domain that DNS information
            is desired for. This should be set to a hostname and not an
            IP Address.</value>
        </member>
        <member name="T:netlib.Dns.DnsResponse">
            <summary>
            Represents one DNS response. This class cannot be directly created -
            it is returned by the <see cref="M:netlib.Dns.DnsRequest.GetResponse(netlib.Dns.DnsRecordType)"/> method.
            </summary>
            <remarks>
            The DnsResponse class represents the information returned by a DNS
            server in response to a <see cref="T:netlib.Dns.DnsRequest"/>. The DnsResponse
            class offers easy access to all of the returned DNS records for a given
            domain.
            </remarks>
        </member>
        <member name="M:netlib.Dns.DnsResponse.GetRecords(netlib.Dns.DnsRecordType)">
            <summary>
            Returns a collection of DNS records of a specified
            <see cref="T:netlib.Dns.DnsRecordType"/>. The collection's data type
            is determined by the type of record being sought in the
            type argument.
            </summary>
            <param name="type">A <see cref="T:netlib.Dns.DnsRecordType"/> enumeration
            value indicating the type of DNS record to get from the list of
            all DNS records (available in the <see cref="P:netlib.Dns.DnsResponse.RawRecords"/>
            property.</param>
            <returns>an <see cref="T:System.Collections.ArrayList"/> of one of the types
            specified in the <see cref="N:netlib.Dns.Records"/> namespace based
            on the <see cref="T:netlib.Dns.DnsRecordType"/> argument representing the
            type of DNS record desired.
            </returns>
            <remarks>
            It is recommended that you loop through the results of this
            method as follows for maximum convenience:
            <code>
            foreach (<see cref="N:netlib.Dns.Records"/> record in obj.GetRecords(<see cref="T:netlib.Dns.DnsRecordType"/>))
            {
                string s = record.ToString();
            }
            </code>
            The following table indicates the DNS record type you can expect to get
            back based on the <see cref="T:netlib.Dns.DnsRecordType"/> requested. Any items returning
            null are not currently supported.
            <list type="table">
                <listheader>
                    <term>DnsRecordType enumeration value</term>
                    <term>GetRecords() returns</term>
                </listheader>
                <item>
                    <term>A</term>
                    <description><see cref="T:netlib.Dns.Records.ARecord"/></description>
                </item>
                <item>
                    <term>CNAME</term>
                    <description><see cref="T:netlib.Dns.Records.PTRRecord"/></description>
                </item>
                <item>
                    <term>PTR</term>
                    <description><see cref="T:netlib.Dns.Records.PTRRecord"/></description>
                </item>
                <item>
                    <term>MX</term>
                    <description><see cref="T:netlib.Dns.Records.MXRecord"/></description>
                </item>
                <item>
                    <term>SRV</term>
                    <description><see cref="T:netlib.Dns.Records.SRVRecord"/></description>
                </item>
                <item>
                    <term>TEXT</term>
                    <description><see cref="T:netlib.Dns.Records.TXTRecord"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:netlib.Dns.DnsResponse.RawRecords">
            <summary>
            Gets a <see cref="T:netlib.Dns.DnsWrapperCollection"/> containing
            all of the DNS information that the server returned about
            the queried domain.
            </summary>
            <remarks>
            Returns all of the DNS records retrieved about the domain
            as a <see cref="T:netlib.Dns.DnsWrapperCollection"/>. This property
            is wrapped by the <see cref="M:netlib.Dns.DnsResponse.GetRecords(netlib.Dns.DnsRecordType)"/> method.
            </remarks>
            <value>Gets a collection of <see cref="T:netlib.Dns.DnsWrapper"/> objects.</value>
        </member>
        <member name="P:netlib.Dns.DnsResponse.SRVRecords">
            <summary>
            Gets all the <see cref="T:netlib.Dns.Records.SRVRecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:netlib.Dns.DnsResponse.GetRecords(netlib.Dns.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:netlib.Dns.Records.SRVRecord"/>s representing all the Address
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:netlib.Dns.Records.SRVRecord"/> objects.</value>
        </member>
        <member name="P:netlib.Dns.DnsResponse.TXTRecords">
            <summary>
            Gets all the <see cref="T:netlib.Dns.Records.TXTRecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:netlib.Dns.DnsResponse.GetRecords(netlib.Dns.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:netlib.Dns.Records.TXTRecord"/>s representing all the Address
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:netlib.Dns.Records.SRVRecord"/> objects.</value>
        </member>
        <member name="P:netlib.Dns.DnsResponse.MXRecords">
            <summary>
            Gets all the <see cref="T:netlib.Dns.Records.MXRecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:netlib.Dns.DnsResponse.GetRecords(netlib.Dns.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:netlib.Dns.Records.MXRecord"/>s representing all the Mail Exchanger
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:netlib.Dns.Records.MXRecord"/> objects.</value>
        </member>
        <member name="T:netlib.Dns.Records.TXTRecord">
            <summary>
            Represents a DNS Text record (DNS_TXT_DATA)
            </summary>
            <remarks>
            The TXTRecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.TXTRecord.StringCount">
            <summary>
            Gets or sets the string count
            </summary>
            <remarks>
            Number of strings represented in pStringArray.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.TXTRecord.StringArray">
            <summary>
            Gets or sets the string array
            </summary>
            <remarks>
            Array of strings representing the descriptive text of the
            TXT resource record.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.TXTRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            string count: [COUNT] string array: [ARR]
            where [COUNT] = string representation of <see cref="F:netlib.Dns.Records.TXTRecord.StringCount"/>
            and   [ARR] = string representation of <see cref="F:netlib.Dns.Records.TXTRecord.StringArray"/>
            </code>
            </remarks>
        </member>
        <member name="T:netlib.Dns.Records.SRVRecord">
            <summary>
            Represents a DNS Server record. (DNS_SRV_DATA)
            </summary>
            <remarks>
            The SRVRecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SRVRecord.NameNext">
            <summary>
            Gets or sets the name
            </summary>
            <remarks>
            Pointer to a string representing the target host.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SRVRecord.Priority">
            <summary>
            Gets or sets the priority
            </summary>
            <remarks>
            Priority of the target host specified in the owner name. Lower numbers imply higher priority.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SRVRecord.Weight">
            <summary>
            Gets or sets the weight
            </summary>
            <remarks>
            Weight of the target host. Useful when selecting among hosts with the same priority. The chances of using this host should be proportional to its weight.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SRVRecord.Port">
            <summary>
            Gets or sets the port
            </summary>
            <remarks>
            Port used on the terget host for the service.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SRVRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.SRVRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            name next: [SERVER] priority: [PRIOR] weight: [WEIGHT] port: [PORT]
            where [SERVER] = string representation of <see cref="F:netlib.Dns.Records.SRVRecord.NameNext"/>
            and   [PRIOR] = string representation of <see cref="F:netlib.Dns.Records.SRVRecord.Priority"/>
            and   [WEIGHT] = string representation of <see cref="F:netlib.Dns.Records.SRVRecord.Weight"/>
            and   [PORT] = string representation of <see cref="F:netlib.Dns.Records.SRVRecord.Port"/>
            </code>
            </remarks>
        </member>
        <member name="T:netlib.Dns.Records.SOARecord">
            <summary>
            Represents a DNS Start Of Authority record (DNS_SOA_DATA)
            </summary>
            <remarks>
            The SOARecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.PrimaryServer">
            <summary>
            Gets or sets the primary server
            </summary>
            <remarks>
            Pointer to a string representing the name of the authoritative
            DNS server for the zone to which the record belongs.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.Administrator">
            <summary>
            Gets or sets the name of the administrator
            </summary>
            <remarks>
            Pointer to a string representing the name of the responsible party
            for the zone to which the record belongs.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.SerialNo">
            <summary>
            Gets or sets the serial number
            </summary>
            <remarks>
            Serial number of the SOA record.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.Refresh">
            <summary>
            Gets or sets the refresh
            </summary>
            <remarks>
            Time, in seconds, before the zone containing this record should be
            refreshed.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.Retry">
            <summary>
            Gets or sets the retry count
            </summary>
            <remarks>
            Time, in seconds, before retrying a failed refresh of the zone to
            which this record belongs
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.Expire">
            <summary>
            Gets or sets the expiration
            </summary>
            <remarks>
            Time, in seconds, before an unresponsive zone is no longer authoritative.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.SOARecord.DefaultTtl">
            <summary>
            Gets or sets the default ttl
            </summary>
            <remarks>
            Lower limit on the time, in seconds, that a DNS server or caching
            resolver are allowed to cache any RRs from the zone to which this
            record belongs.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.SOARecord.ToString">
            <summary>
            Returns a string representation of the Start Of Authority record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            administrator: [ADMIN] TTL: [TTL] primary server: [SERVER] refresh: [REFRESH] retry: [RETRY] serial number: [SERIAL]
            where [ADMIN] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.Administrator"/>
            and   [TTL] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.DefaultTtl"/>
            and   [SERVER] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.PrimaryServer"/>
            and   [REFRESH] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.Refresh"/>
            and   [RETRY] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.Retry"/>
            and   [SERIAL] = string representation of <see cref="F:netlib.Dns.Records.SOARecord.SerialNo"/>
            </code>
            </remarks>
        </member>
        <member name="T:netlib.Dns.Records.PTRRecord">
            <summary>
            Represents the DNS pointer record (DNS_PTR_DATA)
            </summary>
            <remarks>
            The PTRRecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.PTRRecord.HostName">
            <summary>
            Gets or sets the hostname of the record.
            </summary>
            <remarks>
            Pointer to a string representing the pointer (PTR) record data.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.PTRRecord.ToString">
            <summary>
            Returns a string representation of the pointer record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            Hostname: [HOST]
            where [HOST] = string representation of <see cref="F:netlib.Dns.Records.PTRRecord.HostName"/>
            </code>
            </remarks>
        </member>
        <member name="T:netlib.Dns.Records.MXRecord">
            <summary>
            Represents a DNS Mail Exchange record (DNS_MX_DATA).
            </summary>
            <remarks>
            The MXRecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.MXRecord.Exchange">
            <summary>
            Gets or sets the exchange's host name
            </summary>
            <remarks>
            Pointer to a string representing the fully qualified domain name
            (FQDN) of the host willing to act as a mail exchange.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.MXRecord.Preference">
            <summary>
            Gets or sets the preference of the exchange.
            </summary>
            <remarks>
            Preference given to this resource record among others at the same
            owner. Lower values are preferred.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.MXRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.MXRecord.ToString">
            <summary>
            Returns a string representation of this mail exchange.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            exchange (preference): [EXCH] ([PREF])
            where [EXCH] = string representation of <see cref="F:netlib.Dns.Records.MXRecord.Exchange"/>
            and   [PREF] = hexadecimal representation of <see cref="F:netlib.Dns.Records.MXRecord.Preference"/>
            </code>
            </remarks>
        </member>
        <member name="T:netlib.Dns.Records.ARecord">
            <summary>
            Represents a DNS Address record (DNS_A_DATA)
            </summary>
            <remarks>
            The ARecord structure is used in conjunction with
            the <see cref="T:netlib.Dns.DnsRequest"/> and <see cref="T:netlib.Dns.DnsResponse"/>
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:netlib.Dns.Records.ARecord.Address">
            <summary>
            Gets or sets the ip address.
            </summary>
            <remarks>
            IPv4 address, in the form of an uint datatype.
            <see cref="T:System.Net.IPAddress"/> could be
            used to fill this property.
            </remarks>
        </member>
        <member name="M:netlib.Dns.Records.ARecord.ToString">
            <summary>
            Returns a string representation of the A Record
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            ip address: [ADDRESS]
            where [ADDRESS] = <see cref="M:System.Net.IPAddress.ToString"/>
            </code>
            </remarks>
        </member>
    </members>
</doc>
